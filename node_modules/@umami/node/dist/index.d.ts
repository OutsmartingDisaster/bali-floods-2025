interface UmamiOptions {
    hostUrl?: string;
    websiteId?: string;
    sessionId?: string;
    userAgent?: string;
}
interface UmamiPayload {
    website: string;
    hostname?: string;
    language?: string;
    referrer?: string;
    screen?: string;
    title?: string;
    url?: string;
    name?: string;
    data?: {
        [key: string]: string | number | Date;
    };
}
interface UmamiEventData {
    [key: string]: string | number | Date;
}
declare class Umami {
    options: UmamiOptions;
    properties: object;
    constructor(options?: UmamiOptions);
    init(options: UmamiOptions): void;
    send(payload: UmamiPayload, type?: 'event' | 'identify'): Promise<Response>;
    track(event: object | string, eventData?: UmamiEventData): Promise<Response>;
    identify(properties?: object): Promise<Response>;
    reset(): void;
}
declare const umami: Umami;

export { Umami, type UmamiEventData, type UmamiOptions, type UmamiPayload, umami as default };
