{"version":3,"file":"index.mjs","sources":["../index.ts"],"sourcesContent":["export interface UmamiOptions {\n  hostUrl?: string;\n  websiteId?: string;\n  sessionId?: string;\n  userAgent?: string;\n}\n\nexport interface UmamiPayload {\n  website: string;\n  hostname?: string;\n  language?: string;\n  referrer?: string;\n  screen?: string;\n  title?: string;\n  url?: string;\n  name?: string;\n  data?: {\n    [key: string]: string | number | Date;\n  };\n}\n\nexport interface UmamiEventData {\n  [key: string]: string | number | Date;\n}\n\nexport class Umami {\n  options: UmamiOptions;\n  properties: object;\n\n  constructor(options: UmamiOptions = {}) {\n    this.options = options;\n    this.properties = {};\n  }\n\n  init(options: UmamiOptions) {\n    this.options = { ...this.options, ...options };\n  }\n\n  send(payload: UmamiPayload, type: 'event' | 'identify' = 'event') {\n    const { hostUrl, userAgent } = this.options;\n\n    return fetch(`${hostUrl}/api/send`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': userAgent || `Mozilla/5.0 Umami/${process.version}`,\n      },\n      body: JSON.stringify({ type, payload }),\n    });\n  }\n\n  track(event: object | string, eventData?: UmamiEventData) {\n    const type = typeof event;\n    const { websiteId } = this.options;\n\n    switch (type) {\n      case 'string':\n        return this.send({\n          website: websiteId,\n          name: event as string,\n          data: eventData,\n        });\n      case 'object':\n        return this.send({ website: websiteId, ...(event as UmamiPayload) });\n    }\n\n    return Promise.reject('Invalid payload.');\n  }\n\n  identify(properties: object = {}) {\n    this.properties = { ...this.properties, ...properties };\n    const { websiteId } = this.options;\n\n    return this.send({ website: websiteId, data: { ...this.properties } }, 'identify');\n  }\n\n  reset() {\n    this.properties = {};\n  }\n}\n\nconst umami = new Umami();\n\nexport default umami;\n"],"names":[],"mappings":";;;;;;AAyBO,MAAM,KAAM,CAAA;AAAA,EAIjB,WAAA,CAAY,OAAwB,GAAA,EAAI,EAAA;AAHxC,IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AAGE,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAA,IAAA,CAAK,aAAa,EAAC,CAAA;AAAA,GACrB;AAAA,EAEA,KAAK,OAAuB,EAAA;AAC1B,IAAA,IAAA,CAAK,UAAU,EAAE,GAAG,IAAK,CAAA,OAAA,EAAS,GAAG,OAAQ,EAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,IAAA,CAAK,OAAuB,EAAA,IAAA,GAA6B,OAAS,EAAA;AAChE,IAAA,MAAM,EAAE,OAAA,EAAS,SAAU,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AAEpC,IAAO,OAAA,KAAA,CAAM,CAAG,EAAA,OAAO,CAAa,SAAA,CAAA,EAAA;AAAA,MAClC,MAAQ,EAAA,MAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,cAAgB,EAAA,kBAAA;AAAA,QAChB,YAAc,EAAA,SAAA,IAAa,CAAqB,kBAAA,EAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,OACjE;AAAA,MACA,MAAM,IAAK,CAAA,SAAA,CAAU,EAAE,IAAA,EAAM,SAAS,CAAA;AAAA,KACvC,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,KAAA,CAAM,OAAwB,SAA4B,EAAA;AACxD,IAAA,MAAM,OAAO,OAAO,KAAA,CAAA;AACpB,IAAM,MAAA,EAAE,SAAU,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AAE3B,IAAA,QAAQ,IAAM;AAAA,MACZ,KAAK,QAAA;AACH,QAAA,OAAO,KAAK,IAAK,CAAA;AAAA,UACf,OAAS,EAAA,SAAA;AAAA,UACT,IAAM,EAAA,KAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,SACP,CAAA,CAAA;AAAA,MACH,KAAK,QAAA;AACH,QAAA,OAAO,KAAK,IAAK,CAAA,EAAE,SAAS,SAAW,EAAA,GAAI,OAAwB,CAAA,CAAA;AAAA,KACvE;AAEA,IAAO,OAAA,OAAA,CAAQ,OAAO,kBAAkB,CAAA,CAAA;AAAA,GAC1C;AAAA,EAEA,QAAA,CAAS,UAAqB,GAAA,EAAI,EAAA;AAChC,IAAA,IAAA,CAAK,aAAa,EAAE,GAAG,IAAK,CAAA,UAAA,EAAY,GAAG,UAAW,EAAA,CAAA;AACtD,IAAM,MAAA,EAAE,SAAU,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AAE3B,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,EAAE,OAAA,EAAS,SAAW,EAAA,IAAA,EAAM,EAAE,GAAG,IAAK,CAAA,UAAA,EAAa,EAAA,EAAG,UAAU,CAAA,CAAA;AAAA,GACnF;AAAA,EAEA,KAAQ,GAAA;AACN,IAAA,IAAA,CAAK,aAAa,EAAC,CAAA;AAAA,GACrB;AACF,CAAA;AAEM,MAAA,KAAA,GAAQ,IAAI,KAAM;;;;"}